#!/bin/bash
set -e

#############
# TODO
#  * auto-handle output file generation

if [ -z  "$SPEC_DIR" ]; then
   echo "  Please set the SPEC_DIR environment variable to point to your copy of SPEC CPU2017."
   exit 1
fi

# NB: Use the same name in the config "label" as the config filename. See line 33 *.cfg
CONFIG=riscv
CONFIGFILE=${CONFIG}.cfg

# The config used to compile for the host machine
H_CONFIG=host
H_CONFIGFILE=${H_CONFIG}.cfg

# Output redirection redirection to files (names match a spec run)
REDIRECT=false

# CML arguments
# idiomatic parameter and option handling in sh
compileFlag=false
genCommandsFlag=true

# intrate, fprate, intspeed, fpspeed
# Supersets spec{speed,rate}, and all, are not supported
suite_type=int

# rate/speed
rate_value=0

run_type=${suite_type}speed

# ref, train, test
input_type=ref

function usage
{
    echo "usage: gen_binaries.sh [--compile | --genCommands] [-H | -h | --help] [--suite [int | fp] | --input [train | test | ref] | --rate num]"
}

while test $# -gt 0
do
   case "$1" in
        --compile)
            compileFlag=true
            ;;
        --genCommands)
            genCommandsFlag=true
            ;;
        --suite)
            shift;
            suite_type=$1
            ;;
        --rate)
            shift;
            rate_value=$1
            ;;
        --input)
            shift;
            input_type=$1
            ;;
        -h | -H | -help)
            usage
            exit
            ;;
        --*) echo "ERROR: bad option $1"
            usage
            exit 1
            ;;
        *) echo "ERROR: bad argument $1"
            usage
            exit 2
            ;;
    esac
    shift
done

if [ ${rate_value} -gt 0 ]; then
  run_type=${suite_type}rate
fi

echo "== Speckle Options =="
echo "  Config : " ${CONFIG}
echo "  Suite  : " ${suite_type}
echo "  rate   : " ${rate_value}
echo "  run    : " ${run_type}
echo "  Input  : " ${input_type}
echo "  compile: " $compileFlag
echo "  genCmd : " $genCommandsFlag
echo ""

# Directory into which speckle will dump logs and the overlay
build_dir=$PWD/build
overlay_dir=$build_dir/overlay

benchmarks=(400.perlbench 401.bzip2 403.gcc 429.mcf 445.gobmk 456.hmmer 458.sjeng 462.libquantum 464.h264ref 471.omnetpp 473.astar 483.xalancbmk 999.specrand)

# benchmarks=$(basename -s .${input_type}.cmd --multiple $(pwd)/commands/*."${input_type}".cmd)
mkdir -p build;

# compile the binaries
if [ "$compileFlag" = true ]; then
   echo "Compiling SPEC..."
   # TODO: deal with scrubbing properly
   #cd $SPEC_DIR; . ./shrc; time runspec --config ${CONFIG} --action scrub ${suite_type}

   # copy over the config file we will use to compile the benchmarks
   cp $build_dir/../${CONFIGFILE} $SPEC_DIR/config
   cp $build_dir/../${H_CONFIGFILE} $SPEC_DIR/config
   echo "Compiling target SPEC with config: ${CONFIGFILE}"
   cd $SPEC_DIR; . ./shrc; time runspec --verbose 10 --config ${CONFIG} --size ${input_type} \
      --action build --rate ${rate_value} ${suite_type} > ${build_dir}/${CONFIG}-${run_type}-build.log
   echo "Compiling host SPEC and generating inputs with config: ${H_CONFIGFILE}"
   cd $SPEC_DIR; . ./shrc; time runspec --verbose 10 --config ${H_CONFIG} --size ${input_type} \
      --action runsetup --rate ${rate_value} ${suite_type} > ${build_dir}/${H_CONFIG}-${run_type}-build.log

   for b in ${benchmarks[@]}; do
      output_dir=${overlay_dir}/${run_type}/${input_type}/$b
      mkdir -p $output_dir
      bmark_base_dir=$SPEC_DIR/benchspec/CPU2006/$b
      unprefixed=${b:4}
      b_short_name=${unprefixed}

      if [[ "${input_type}" == "ref" ]]; then
         host_bmk_dir=${bmark_base_dir}/run/run_base_ref_${H_CONFIG}.0000;
      else
         host_bmk_dir=${bmark_base_dir}/run/run_base_${input_type}_${H_CONFIG}.0000;
      fi

      # Copy the inputs from the host build
      inputs=$(find "$host_bmk_dir"/* -maxdepth 0 ! -executable -o -type d)
      for input in ${inputs[@]}; do
         echo $input
         cp -rf $input -T $output_dir/$(basename "$input")
      done

      if [[ $b == "483.xalancbmk" ]]; then
        target_bin=`find $bmark_base_dir/exe/ -name "Xalan*${CONFIG}"`
      else
        target_bin=`find $bmark_base_dir/exe/ -name "*${b_short_name}*${CONFIG}"`
      fi
      cp -f ${target_bin} $output_dir/

      # Generate a run script
      run_script=${output_dir}/run.sh
      echo "#!/bin/bash" > ${run_script}
      echo "#This script was generated by Speckle gen_binaries.sh" >> ${run_script}

      IFS=$'\n' read -d '' -r -a commands < $build_dir/../commands/${b}.${input_type}.cmd || [ "${commands[0]}" ]
      workload_idx=0
      for input in "${commands[@]}"; do
         if [[ ${input:0:1} != '#' ]]; then # allow us to comment out lines in the cmd files
            if [[ "$REDIRECT" = false ]]; then
               input=${input% > *}
            fi
            workload_run_script=${output_dir}/run_workload${workload_idx}.sh
            echo "#!/bin/bash" > ${workload_run_script}
            message="echo 'Running: ./$(basename "${target_bin}") ${input}'"
            cmd="./$(basename "${target_bin}") ${input}"
            echo "$message" >> ${run_script}
            echo "$message" >> ${workload_run_script}
            echo "$cmd" >> ${run_script}
            echo "$cmd" >> ${workload_run_script}
            chmod +x $workload_run_script
            workload_idx="$((workload_idx+1))"
         fi
      done
      chmod +x $run_script
   done
   # Copy the master runscript into the overlay directory
   cp ${build_dir}/../spec06-run-scripts/${run_type}.sh ${overlay_dir}/${run_type}/${input_type}

fi

echo ""
echo "Done!"
